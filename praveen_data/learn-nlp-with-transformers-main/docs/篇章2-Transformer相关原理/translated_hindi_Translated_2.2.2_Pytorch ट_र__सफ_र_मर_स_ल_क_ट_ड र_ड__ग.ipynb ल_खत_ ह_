{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PyTorch में ट्रांसफार्मर स्रोत कोड स्पष्टीकरण\n",
    "[2.2-इलस्ट्रेटेड ट्रांसफार्मर] (./अध्याय 2-ट्रांसफॉर्मर संबंधित सिद्धांत/2.2-इलस्ट्रेटेड ट्रांसफार्मर.एमडी) को पढ़ने के बाद, मुझे आशा है कि आप इस खंड में ट्रांसफार्मर के प्रत्येक मॉड्यूल के डिजाइन और गणना की स्पष्ट समझ प्राप्त कर सकते हैं आपको इस जटिल मॉडल को और अधिक सीखने में मदद करने के लिए पाइटोरच पर आधारित एक ट्रांसफार्मर लागू करेगा। 2.2.1 के विपरीत, यह लेख आपके संदर्भ के लिए इनपुट-मॉडल-आउटपुट के क्रम में ट्रांसफार्मर को लागू करता है।\n",
    "**बच्चूटेर**\n",
    "\n",
    "- [शब्द एम्बेडिंग](#एम्बेड)\n",
    "- [स्थिति एन्कोडिंग](#pos)\n",
    "- [मल्टीहेड ध्यान](#मल्टीहेड)\n",
    "- [बिल्डिंग ट्रांसफार्मर](#बिल्ड)\n",
    "\n",
    "![](./pictures/0-1-transformer-arc.png)\n",
    "\n",
    "चित्र: ट्रांसफार्मर संरचना आरेख"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## **<div id='embed'>शब्द एम्बेडिंग</div>**\n",
    "\n",
    "जैसा कि ऊपर दिए गए चित्र में दिखाया गया है, ट्रांसफार्मर आरेख का बाईं ओर एनकोडर है, और दाईं ओर डिकोडर है। एनकोडर स्रोत भाषा अनुक्रम को इनपुट करता है, और डिकोडर अनुवादित किए जाने वाले भाषा पाठ को इनपुट करता है (प्रशिक्षण के दौरान)। पाठ में अक्सर कई अनुक्रम होते हैं। सामान्य ऑपरेशन अनुक्रम पर कुछ प्रीप्रोसेसिंग (जैसे शब्द विभाजन, आदि) करना है ताकि इसे अनुक्रमों की सूची में बदल दिया जा सकेआमतौर पर सबसे छोटे शब्द जिन्हें शब्दावली में विभाजित नहीं किया जा सकता है, संपूर्ण पाठ एक बड़ी सूची है, और तत्व एक-एक करके अनुक्रमों से बनी सूचियाँ हैं, उदाहरण के लिए, विभाजन के बाद, एक अनुक्रम बन जाता है [\"am\", \"##। ro\", \"##zi\", \"मिलता है\", \"उसका\", \"पिता\"]। इसके बाद, उन्हें शब्दावली में उनके संबंधित सूचकांक के अनुसार परिवर्तित किया जाता है। मान लें कि परिणाम है [23, 94, 13, 41, 27, 96] यदि संपूर्ण पाठ में 100 वाक्य हैं, तो उसके तत्वों के रूप में 100 सूचियाँ हैंप्रत्येक अनुक्रम की ngth अलग है, अधिकतम लंबाई निर्धारित करने की आवश्यकता है। यहां हम इसे 128 पर भी सेट कर सकते हैं। फिर पूरे पाठ को एक सरणी में परिवर्तित करने के बाद, आकार 100 x 128 है, जो बैच_आकार और seq_length से मेल खाता है।\n",
    "\n",
    "इनपुट के बाद, शब्द एम्बेडिंग प्रक्रिया तुरंत निष्पादित की जाती है। वर्ड एम्बेडिंग प्रत्येक शब्द को पूर्व-प्रशिक्षित वेक्टर के साथ मैप करना है।\n",
    "\n",
    "टॉर्च में वर्ड एम्बेडिंग `torch.nn.Embedding` कार्यान्वयन पर आधारित है, इंस्टेंटियेटिंग करते समय जिन मापदंडों को सेट करने की आवश्यकता होती है वे हैंई शब्दावली का आकार और मैप किए गए वेक्टर का आयाम, जैसे `एम्बेड = एनएन.एंबेडिंग(10,8)` एक वेक्टर का आयाम आम तौर पर वेक्टर में संख्याओं की संख्या है शब्दावली का आकार। यदि आपके पास वर्तमान में अधिकतम 8 शब्द हैं, तो आमतौर पर 10 भरें (अनक और पैड के लिए एक और स्थान। यदि आप बाद में इन 8 शब्दों से भिन्न शब्द दर्ज करते हैं, तो इसे अनक में मैप किया जाएगा।) अनुक्रम पैडिंग भाग को पैड पर मैप किया जाएगा।\n",
    "\n",
    "यदि हम 8 डी तक मानचित्र बनाने की योजना बनाते हैंimensions (num_features या embed_dim), तो पूरे टेक्स्ट का आकार 100 x 128 x 8 हो जाता है। आगे, समझाने के लिए एक छोटा सा उदाहरण लेते हैं: मान लीजिए कि हमारी शब्दावली में कुल 10 शब्द हैं (unc और पैड सहित), तो 2 हैं पाठ में वाक्य, प्रत्येक वाक्य में 4 शब्द हैं, और हम प्रत्येक शब्द को 8-आयामी वेक्टर में मैप करना चाहते हैं, इसलिए 2, 4, 8 बैच_साइज़, seq_length, एम्बेड_डिम के अनुरूप हैं (यदि बैच पहले आयाम में है)।\n",
    "\n",
    "इसके अलावा, सामान्य तौर पर, गहन शिक्षण कार्य केवल num_features बदलते हैं,इसलिए आयाम आम तौर पर अंतिम विशेषता का आयाम होता है।\n",
    "\n",
    "प्रोग्रामिंग प्रारंभ करें:\n",
    "\n",
    "सभी आवश्यक पैकेज आयात करें:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.nn.parameter import Parameter\n",
    "from torch.nn.init import xavier_uniform_\n",
    "from torch.nn.init import constant_\n",
    "from torch.nn.init import xavier_normal_\n",
    "import torch.nn.functional as F\n",
    "from typing import Optional, Tuple, Any\n",
    "from typing import List, Optional, Tuple\n",
    "import math\n",
    "import warnings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2, 4, 8])\n"
     ]
    }
   ],
   "source": [
    "X = torch.zeros((2,4),dtype=torch.long)\n",
    "embed = nn.Embedding(10,8)\n",
    "print(embed(X).shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## **<div id='pos'>स्थिति एन्कोडिंग</div>**\n",
    "\n",
    "शब्द एम्बेडिंग के बाद, स्थिति एन्कोडिंग का पालन किया जाता है, जिसका उपयोग विभिन्न शब्दों और एक ही शब्द की विभिन्न विशेषताओं के बीच संबंध को अलग करने के लिए किया जाता है। ध्यान दें कि X_ केवल एक प्रारंभिक मैट्रिक्स है, स्थिति एन्कोडिंग पूरा करने के बाद, एक ड्रॉपआउट जोड़ा जाता है। इसके अलावा, स्थिति एन्कोडिंग को अंत में जोड़ा जाता है, इसलिए इनपुट और आउटपुट आकार अपरिवर्तित रहते हैं।"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "Tensor = torch.Tensor\n",
    "def positional_encoding(X, num_features, dropout_p=0.1, max_len=512) -> Tensor:\n",
    "    r'''\n",
    "        给输入加入位置编码\n",
    "    参数：\n",
    "        - num_features: 输入进来的维度\n",
    "        - dropout_p: dropout的概率，当其为非零时执行dropout\n",
    "        - max_len: 句子的最大长度，默认512\n",
    "    \n",
    "    形状：\n",
    "        - 输入： [batch_size, seq_length, num_features]\n",
    "        - 输出： [batch_size, seq_length, num_features]\n",
    "\n",
    "    例子：\n",
    "        >>> X = torch.randn((2,4,10))\n",
    "        >>> X = positional_encoding(X, 10)\n",
    "        >>> print(X.shape)\n",
    "        >>> torch.Size([2, 4, 10])\n",
    "    '''\n",
    "\n",
    "    dropout = nn.Dropout(dropout_p)\n",
    "    P = torch.zeros((1,max_len,num_features))\n",
    "    X_ = torch.arange(max_len,dtype=torch.float32).reshape(-1,1) / torch.pow(\n",
    "        10000,\n",
    "        torch.arange(0,num_features,2,dtype=torch.float32) /num_features)\n",
    "    P[:,:,0::2] = torch.sin(X_)\n",
    "    P[:,:,1::2] = torch.cos(X_)\n",
    "    X = X + P[:,:X.shape[1],:].to(X.device)\n",
    "    return dropout(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2, 4, 10])\n"
     ]
    }
   ],
   "source": [
    "#स्थितीय एन्कोडिंग उदाहरण\n",
    "X = torch.randn((2,4,10))\n",
    "X = positional_encoding(X, 10)\n",
    "print(X.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## **<div id='multihead'>मल्टी-हेड ध्यान</div>**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### अलग करें और मल्टी-हेड ध्यान तंत्र देखें\n",
    "**पूर्ण संस्करण में मल्टी-हेड अटेंशन मैकेनिज्म का वर्ग पीछे है। आइए संपूर्ण पर एक नजर डालें: मल्टी-हेड अटेंशन मैकेनिज्म-मल्टीहेड अटेंशन अनुभाग और फिर नीचे दिए गए स्पष्टीकरणों को देखने के लिए वापस आएं।\n",
    "\n",
    "मल्टी-हेड अटेंशन क्लास के मुख्य घटक हैं: पैरामीटर आरंभीकरण, मल्टी_हेड_अटेंशन_फॉरवर्ड\n",
    "\n",
    "#### आरंभीकरण पैरामीटर\n",
    "```अजगर\n",
    "यदि self._qkv_same_embed_dim ग़लत है:\n",
    "#थेशापई आरंभीकरण से पहले और बाद में अपरिवर्तित रहता है\n",
    "# (seq_length x एम्बेड_डिम) x (एम्बेड_डिम x एम्बेड_डिम) ==> (seq_length x एम्बेड_डिम)\n",
    "self.q_proj_weight = पैरामीटर(मशाल.खाली((एम्बेड_डिम, एंबेड_डिम)))\n",
    "self.k_proj_weight = पैरामीटर(मशाल.खाली((embed_dim, self.kdim)))\n",
    "self.v_proj_weight = पैरामीटर(मशाल.खाली((एम्बेड_डिम, सेल्फ.vdim)))\n",
    "self.register_parameter('in_proj_weight', कोई नहीं)\n",
    "अन्य:\n",
    "self.in_proj_weight = पैरामीटर(मशाल.खाली((3 * एम्बेड_डिम, एम्बेड_डिम)))\n",
    "self.register_parameter('q_proj_weiघट', कोई नहीं)\n",
    "self.register_parameter('k_proj_weight', कोई नहीं)\n",
    "self.register_parameter('v_proj_weight', कोई नहीं)\n",
    "\n",
    "यदि पूर्वाग्रह:\n",
    "self.in_proj_bias = पैरामीटर(मशाल.खाली(3 * एंबेड_डिम))\n",
    "अन्य:\n",
    "self.register_parameter('in_proj_bias', कोई नहीं)\n",
    "# सभी प्रमुखों का ध्यान एक साथ लगाया जाएगा और फिर वेट मैट्रिक्स आउटपुट से गुणा किया जाएगा\n",
    "#out_proj बाद के लिए तैयार किया गया है\n",
    "self.out_proj= nn.रैखिक(एम्बेड_डिम, एम्बेड_डिम, पूर्वाग्रह=पूर्वाग्रह)\n",
    "self._reset_parameters()\n",
    "```\n",
    "\n",
    "टॉर्च.एम्प्टी संबंधित टेंसर एकॉर्ड बनाता हैदिए गए आकार में, और विशेषता यह है कि भरे हुए मान को Torch.randn (मानक सामान्य वितरण) के अनुरूप प्रारंभ नहीं किया गया है, यह PyTorch में प्रारंभ करने का एक तरीका है, यदि चर प्रकार टेंसर है, तो मान नहीं हो सकता है संशोधित किया जा सकता है, और पैरामीटर () फ़ंक्शन को एक प्रकार रूपांतरण फ़ंक्शन के रूप में माना जा सकता है, जो अपरिवर्तनीय टेंसर को एक प्रशिक्षित और संशोधित मॉडल पैरामीटर में परिवर्तित करता है, अर्थात, यह मॉडल.पैरामीटर से बंधा होता हैइस पैरामीटर को model.parameters में डालने के लिए, और None का मतलब है कि ऐसा कोई पैरामीटर नहीं है।\n",
    "\n",
    "यह निर्धारित करने के लिए यहां एक if कथन है कि क्या q, k, और v का अंतिम आयाम सुसंगत है, एक बड़े वजन मैट्रिक्स को गुणा किया जाता है और फिर विभाजित किया जाता है, प्रत्येक को अलग से प्रारंभ किया जाता है वास्तव में, आरंभीकरण से मूल आकार नहीं बदलेगा (जैसे![](http://latex.codecogs.com/svg.latex?q=qW_q+b_q), टिप्पणियाँ देखें)।\n",
    "\n",
    "आप पा सकते हैं कि एक _reset_parameters() फू हैअंत में क्रिया, इसका उपयोग पैरामीटर मान को आरंभ करने के लिए किया जाता है। %BA %8C%E5%9E%8B%E5%9D%87%E5%8B%BB%E5%88%86%E5%B8%83) आरंभीकरण मूल्य के रूप में, और xavier_normal_ इन दो कार्यों का नमूना लेता है आवश्यक हैं क्योंकि तंत्रिका नेटवर्क को प्रशिक्षित करते समय आरंभीकरण मूल्य बहुत महत्वपूर्ण है।\n",
    "\n",
    "स्थिरांक_ का अर्थ है इनपुट वेक्टर को दिए गए से भरनाकीमत।\n",
    "\n",
    "इसके अलावा, PyTorch के स्रोत कोड में, ऐसा लगता है कि प्रक्षेपण एक रैखिक परिवर्तन का प्रतिनिधित्व करता है, और in_proj_bias का अर्थ प्रारंभिक रैखिक परिवर्तन का पूर्वाग्रह है\n",
    "\n",
    "```अजगर\n",
    "def _reset_parameters(स्वयं):\n",
    "यदि self._qkv_same_embed_dim:\n",
    "xavier_uniform_(self.in_proj_weight)\n",
    "अन्य:\n",
    "xavier_uniform_(self.q_proj_weight)\n",
    "xavier_uniform_(self.k_proj_weight)\n",
    "xavier_uniform_(self.v_proj_weight)\n",
    "यदि self.in_proj_bias कोई नहीं है:\n",
    "स्थिर_(self.in_proj_bias, 0.)\n",
    "स्थिर_(self.out_proj.bias, 0.)\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### मल्टी_हेड_अटेंशन_फॉरवर्ड\n",
    "यह फ़ंक्शन निम्नलिखित कोड में दिखाया गया है, जिसे मुख्य रूप से 3 भागों में विभाजित किया गया है:\n",
    "- क्वेरी, कुंजी, मान को _in_projection_packed के माध्यम से q, k, v में बदल दिया जाता है\n",
    "- रोड़ा तंत्र\n",
    "- डॉट उत्पाद ध्यान"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "Tensor = torch.Tensor\n",
    "def multi_head_attention_forward(\n",
    "    query: Tensor,\n",
    "    key: Tensor,\n",
    "    value: Tensor,\n",
    "    num_heads: int,\n",
    "    in_proj_weight: Tensor,\n",
    "    in_proj_bias: Optional[Tensor],\n",
    "    dropout_p: float,\n",
    "    out_proj_weight: Tensor,\n",
    "    out_proj_bias: Optional[Tensor],\n",
    "    training: bool = True,\n",
    "    key_padding_mask: Optional[Tensor] = None,\n",
    "    need_weights: bool = True,\n",
    "    attn_mask: Optional[Tensor] = None,\n",
    "    use_seperate_proj_weight = None,\n",
    "    q_proj_weight: Optional[Tensor] = None,\n",
    "    k_proj_weight: Optional[Tensor] = None,\n",
    "    v_proj_weight: Optional[Tensor] = None,\n",
    ") -> Tuple[Tensor, Optional[Tensor]]:\n",
    "    r'''\n",
    "    形状：\n",
    "        输入：\n",
    "        - query：`(L, N, E)`\n",
    "        - key: `(S, N, E)`\n",
    "        - value: `(S, N, E)`\n",
    "        - key_padding_mask: `(N, S)`\n",
    "        - attn_mask: `(L, S)` or `(N * num_heads, L, S)`\n",
    "        输出：\n",
    "        - attn_output:`(L, N, E)`\n",
    "        - attn_output_weights:`(N, L, S)`\n",
    "    '''\n",
    "    tgt_len, bsz, embed_dim = query.shape\n",
    "    src_len, _, _ = key.shape\n",
    "    head_dim = embed_dim // num_heads\n",
    "    q, k, v = _in_projection_packed(query, key, value, in_proj_weight, in_proj_bias)\n",
    "\n",
    "    if attn_mask is not None:\n",
    "        if attn_mask.dtype == torch.uint8:\n",
    "            warnings.warn(\"Byte tensor for attn_mask in nn.MultiheadAttention is deprecated. Use bool tensor instead.\")\n",
    "            attn_mask = attn_mask.to(torch.bool)\n",
    "        else:\n",
    "            assert attn_mask.is_floating_point() or attn_mask.dtype == torch.bool, \\\n",
    "                f\"Only float, byte, and bool types are supported for attn_mask, not {attn_mask.dtype}\"\n",
    "\n",
    "        if attn_mask.dim() == 2:\n",
    "            correct_2d_size = (tgt_len, src_len)\n",
    "            if attn_mask.shape != correct_2d_size:\n",
    "                raise RuntimeError(f\"The shape of the 2D attn_mask is {attn_mask.shape}, but should be {correct_2d_size}.\")\n",
    "            attn_mask = attn_mask.unsqueeze(0)\n",
    "        elif attn_mask.dim() == 3:\n",
    "            correct_3d_size = (bsz * num_heads, tgt_len, src_len)\n",
    "            if attn_mask.shape != correct_3d_size:\n",
    "                raise RuntimeError(f\"The shape of the 3D attn_mask is {attn_mask.shape}, but should be {correct_3d_size}.\")\n",
    "        else:\n",
    "            raise RuntimeError(f\"attn_mask's dimension {attn_mask.dim()} is not supported\")\n",
    "\n",
    "    if key_padding_mask is not None and key_padding_mask.dtype == torch.uint8:\n",
    "        warnings.warn(\"Byte tensor for key_padding_mask in nn.MultiheadAttention is deprecated. Use bool tensor instead.\")\n",
    "        key_padding_mask = key_padding_mask.to(torch.bool)\n",
    "    \n",
    "# डॉट उत्पाद ध्यान को फिट करने के लिए क्यू, के, वी को दोबारा आकार दें, बैच को पहले आयाम में रखें\n",
    "# यह एक मल्टी-हेड मैकेनिज्म भी है, जो विभिन्न हेड्स को एक परत में जोड़ता है\n",
    "    q = q.contiguous().view(tgt_len, bsz * num_heads, head_dim).transpose(0, 1)\n",
    "    k = k.contiguous().view(-1, bsz * num_heads, head_dim).transpose(0, 1)\n",
    "    v = v.contiguous().view(-1, bsz * num_heads, head_dim).transpose(0, 1)\n",
    "    if key_padding_mask is not None:\n",
    "        assert key_padding_mask.shape == (bsz, src_len), \\\n",
    "            f\"expecting key_padding_mask shape of {(bsz, src_len)}, but got {key_padding_mask.shape}\"\n",
    "        key_padding_mask = key_padding_mask.view(bsz, 1, 1, src_len).   \\\n",
    "            expand(-1, num_heads, -1, -1).reshape(bsz * num_heads, 1, src_len)\n",
    "        if attn_mask is None:\n",
    "            attn_mask = key_padding_mask\n",
    "        elif attn_mask.dtype == torch.bool:\n",
    "            attn_mask = attn_mask.logical_or(key_padding_mask)\n",
    "        else:\n",
    "            attn_mask = attn_mask.masked_fill(key_padding_mask, float(\"-inf\"))\n",
    "# यदि attn_mask मान एक बूलियन मान है, तो मास्क को फ़्लोट में बदलें\n",
    "    if attn_mask is not None and attn_mask.dtype == torch.bool:\n",
    "        new_attn_mask = torch.zeros_like(attn_mask, dtype=torch.float)\n",
    "        new_attn_mask.masked_fill_(attn_mask, float(\"-inf\"))\n",
    "        attn_mask = new_attn_mask\n",
    "\n",
    "# ड्रॉपआउट तभी लागू होता है जब प्रशिक्षण सही हो\n",
    "    if not training:\n",
    "        dropout_p = 0.0\n",
    "    attn_output, attn_output_weights = _scaled_dot_product_attention(q, k, v, attn_mask, dropout_p)\n",
    "    attn_output = attn_output.transpose(0, 1).contiguous().view(tgt_len, bsz, embed_dim)\n",
    "    attn_output = nn.functional.linear(attn_output, out_proj_weight, out_proj_bias)\n",
    "    if need_weights:\n",
    "# सिर पर औसत ध्यान भार\n",
    "        attn_output_weights = attn_output_weights.view(bsz, num_heads, tgt_len, src_len)\n",
    "        return attn_output, attn_output_weights.sum(dim=1) / num_heads\n",
    "    else:\n",
    "        return attn_output, None"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### क्वेरी, कुंजी, मान को _in_projection_packed के माध्यम से q, k, v में बदल दिया जाता है\n",
    "```\n",
    "q, k, v = _in_projection_packed(क्वेरी, कुंजी, मान, in_proj_weight, in_proj_bias)\n",
    "```\n",
    "\n",
    "`nn.functional.linear` फ़ंक्शन के लिए, यह वास्तव में एक रैखिक परिवर्तन है। `nn.Linear` के विपरीत, पूर्व निष्पादित करने के लिए वेट मैट्रिक्स और पूर्वाग्रह प्रदान कर सकता है ![](http://latex.codecogs.com/svg .latex?y=xW^T+b), जबकि बाद वाला स्वतंत्र रूप से आउटपुट आयाम निर्धारित कर सकता है।"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def _in_projection_packed(\n",
    "    q: Tensor,\n",
    "    k: Tensor,\n",
    "    v: Tensor,\n",
    "    w: Tensor,\n",
    "    b: Optional[Tensor] = None,\n",
    ") -> List[Tensor]:\n",
    "    r\"\"\"\n",
    "    用一个大的权重参数矩阵进行线性变换\n",
    "\n",
    "    参数:\n",
    "        q, k, v: 对自注意来说，三者都是src；对于seq2seq模型，k和v是一致的tensor。\n",
    "                 但它们的最后一维(num_features或者叫做embed_dim)都必须保持一致。\n",
    "        w: 用以线性变换的大矩阵，按照q,k,v的顺序压在一个tensor里面。\n",
    "        b: 用以线性变换的偏置，按照q,k,v的顺序压在一个tensor里面。\n",
    "\n",
    "    形状:\n",
    "        输入:\n",
    "        - q: shape:`(..., E)`，E是词嵌入的维度（下面出现的E均为此意）。\n",
    "        - k: shape:`(..., E)`\n",
    "        - v: shape:`(..., E)`\n",
    "        - w: shape:`(E * 3, E)`\n",
    "        - b: shape:`E * 3` \n",
    "\n",
    "        输出:\n",
    "        - 输出列表 :`[q', k', v']`，q,k,v经过线性变换前后的形状都一致。\n",
    "    \"\"\"\n",
    "    E = q.size(-1)\n",
    "# यदि यह आत्म-ध्यान है, तो q = k = v = src, इसलिए उनके संदर्भ चर src हैं\n",
    "# अर्थात, k, v है और q, k, दोनों सत्य हैं\n",
    "# यदि यह seq2seq, k = v है, तो k का परिणाम v सत्य है\n",
    "    if k is v:\n",
    "        if q is k:\n",
    "            return F.linear(q, w, b).chunk(3, dim=-1)\n",
    "        else:\n",
    "# seq2seq मॉडल\n",
    "            w_q, w_kv = w.split([E, E * 2])\n",
    "            if b is None:\n",
    "                b_q = b_kv = None\n",
    "            else:\n",
    "                b_q, b_kv = b.split([E, E * 2])\n",
    "            return (F.linear(q, w_q, b_q),) + F.linear(k, w_kv, b_kv).chunk(2, dim=-1)\n",
    "    else:\n",
    "        w_q, w_k, w_v = w.chunk(3)\n",
    "        if b is None:\n",
    "            b_q = b_k = b_v = None\n",
    "        else:\n",
    "            b_q, b_k, b_v = b.chunk(3)\n",
    "        return F.linear(q, w_q, b_q), F.linear(k, w_k, b_k), F.linear(v, w_v, b_v)\n",
    "\n",
    "# q, k, v = _in_projection_packed(क्वेरी, कुंजी, मान, in_proj_weight, in_proj_bias)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "\n",
    "##### मास्किंग तंत्र\n",
    "\n",
    "Attn_mask के लिए, यदि यह 2D है, तो आकार `(L, S)` जैसा है, L और S क्रमशः लक्ष्य भाषा और स्रोत भाषा अनुक्रम लंबाई का प्रतिनिधित्व करते हैं; यदि यह 3D है, तो आकार `(N * num_heads, L) जैसा है , S)`, N बैच_आकार का प्रतिनिधित्व करता है, और num_heads ध्यान शीर्षों की संख्या का प्रतिनिधित्व करता है यदि attn_mask का dtype ByteTensor है, तो गैर-शून्य स्थिति को नजरअंदाज कर दिया जाएगा और यदि यह BoolTensor है, तो True के अनुरूप स्थिति पर कोई ध्यान नहीं दिया जाएगा नजरअंदाज कर दिया जाएगा अगर यह मैंयह एक संख्यात्मक मान है, इसे सीधे attn_weights में जोड़ा जाएगा।\n",
    "\n",
    "क्योंकि जब डिकोडर डिकोड करता है, तो वह केवल स्थिति और उससे पहले की स्थिति देख सकता है। यदि वह पीछे देखता है, तो यह उल्लंघन होगा, इसलिए attn_mask को छिपाने की आवश्यकता है।\n",
    "\n",
    "निम्नलिखित फ़ंक्शन सीधे PyTorch की प्रतिलिपि बनाता है, जिसका अर्थ है विभिन्न आयामों और विभिन्न प्रकार के रूपांतरणों का सही मुखौटा आकार सुनिश्चित करना\n",
    "\n",
    "```अजगर\n",
    "यदि attn_mask कोई नहीं है:\n",
    "यदि attn_mask.dtype == torch.uint8:\n",
    "चेतावनियां.चेतावनी('n में attn_mask के लिए बाइट टेंसरn.मल्टीहेडअटेंशन अप्रचलित है। इसके बजाय बूल टेंसर का उपयोग करें।\")\n",
    "attn_mask = attn_mask.to(torch.bool)\n",
    "अन्य:\n",
    "attn_mask.is_floating_point() या attn_mask.dtype == torch.bool, \\ पर जोर दें\n",
    "f\"केवल फ्लोट, बाइट और बूल प्रकार attn_mask के लिए समर्थित हैं, {attn_mask.dtype} के लिए नहीं\"\n",
    "# विभिन्न आयामों के लिए आकार निर्धारण\n",
    "यदि attn_mask.dim() == 2:\n",
    "सही_2d_आकार = (tgt_len, src_len)\n",
    "यदि attn_mask.shape != सही_2d_आकार:\n",
    "raise RuntimeError(f\"2D attn_mask का आकार {attn_mask.shape} है, लेकिन होना चाहिए{सही_2d_आकार}.\")\n",
    "attn_mask = attn_mask.unsqueeze(0)\n",
    "एलिफ़ attn_mask.dim() == 3:\n",
    "सही_3डी_आकार = (बीएसजेड * num_heads, tgt_len, src_len)\n",
    "यदि attn_mask.shape != सही_3d_आकार:\n",
    "raise RuntimeError(f\"3D attn_mask का आकार {attn_mask.shape} है, लेकिन {correct_3d_size} होना चाहिए।\")\n",
    "अन्य:\n",
    "raise RuntimeError(f\"attn_mask का आयाम {attn_mask.dim()} समर्थित नहीं है\")\n",
    "\n",
    "```\n",
    "`attn_mask` के विपरीत, `key_padding_mask` का उपयोग कुंजी में मान को छुपाने के लिए किया जाता है, विशेष रूप से, यह `<PAD>` होना चाहिएAttn_mask के साथ संगत को अनदेखा किया जा रहा है।\n",
    "\n",
    "```अजगर\n",
    "# key_padding_mask मान को बूलियन मान में बदलें\n",
    "यदि key_padding_mask कोई नहीं है और key_padding_mask.dtype == torch.uint8:\n",
    "चेतावनियाँ.चेतावनी('nn.MultiheadAttention में key_padding_mask के लिए बाइट टेंसर अप्रचलित है। इसके बजाय बूल टेंसर का उपयोग करें।')\n",
    "key_padding_mask = key_padding_mask.to(torch.bool)\n",
    "```\n",
    "\n",
    "पहले दो छोटे फ़ंक्शन, `लॉजिकल_ऑर` पेश करें, दो टेंसर इनपुट करें, और केवल इन दो टेनसर में मानों पर `लॉजिकल या` ऑपरेशन करेंजब दोनों मान 0 होते हैं तो यह 'गलत' होता है, और अन्य सभी समय 'सत्य' होता है। दूसरा 'मास्क_फिल' होता है, इनपुट एक मास्क होता है और मास्क में भरे जाने वाले मान में 1 और 0 होते हैं। 0 का स्थिति मान अपरिवर्तित रहता है, और 1 की स्थिति एक नए मान से भर जाती है।\n",
    "```अजगर\n",
    "ए = टॉर्च.टेंसर([0,1,10,0],dtype=torch.int8)\n",
    "बी = टॉर्च.टेंसर([4,0,1,0],डीटाइप=टॉर्च.इंट8)\n",
    "प्रिंट(मशाल.लॉजिकल_या(ए,बी))\n",
    "# टेंसर([सच्चा, सच्चा, सच्चा, गलत])\n",
    "```\n",
    "\n",
    "```अजगर\n",
    "आर = टॉर्च.टेंसर([[0,0,0,0],[0,0,0,0]])\n",
    "मुखौटा=टोर्कh.tensor([[1,1,1,1],[0,0,0,0]])\n",
    "प्रिंट(आर.मास्कड_फिल(मास्क,1))\n",
    "# टेंसर([[1, 1, 1, 1],\n",
    "# [0, 0, 0, 0]])\n",
    "```\n",
    "वास्तव में, कभी-कभी attn_mask और key_padding_mask में एक ही ऑब्जेक्ट होता है, इसलिए कभी-कभी उन्हें एक साथ देखा जा सकता है, सॉफ्टमैक्स के बाद `-inf` 0 होता है, जिसका अर्थ है कि इसे अनदेखा कर दिया जाता है।\n",
    "```अजगर\n",
    "यदि key_padding_mask कोई नहीं है:\n",
    "ज़ोर key_padding_mask.shape == (bsz, src_len), \\\n",
    "f\"की_पैडिंग_मास्क आकार {(bsz, src_len)} की उम्मीद कर रहा था, लेकिन मिला {key_padding_mask.shape}\"\n",
    "key_padding_mask = key_padding_mask.view(bsz, 1, 1, src_len).\n",
    "विस्तार(-1, num_heads, -1, -1).reshape(bsz * num_heads, 1, src_len)\n",
    "# यदि attn_mask खाली है, तो सीधे key_padding_mask का उपयोग करें\n",
    "यदि attn_mask कोई नहीं है:\n",
    "attn_mask = key_padding_mask\n",
    "एलिफ़ attn_mask.dtype == मशाल.बूल:\n",
    "attn_mask = attn_mask.ological_or(key_padding_mask)\n",
    "अन्य:\n",
    "attn_mask = attn_mask.masked_fill(key_padding_mask, फ्लोट(\"-inf\"))\n",
    "\n",
    "# यदि attn_mask मान एक बूलियन मान है, तो मास्क को फ़्लोट में बदलें\n",
    "यदि attn_mask कोई नहीं है और attn_mask.dtype == torch.bool:\n",
    "new_attn_mask = मशाल.zeros_लाइक(attn_mask, dtype=torch.float)\n",
    "new_attn_mask.masked_fill_(attn_mask, फ्लोट(\"-inf\"))\n",
    "attn_mask = new_attn_mask\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "##### डॉट उत्पाद ध्यान"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import Optional, Tuple, Any\n",
    "def _scaled_dot_product_attention(\n",
    "    q: Tensor,\n",
    "    k: Tensor,\n",
    "    v: Tensor,\n",
    "    attn_mask: Optional[Tensor] = None,\n",
    "    dropout_p: float = 0.0,\n",
    ") -> Tuple[Tensor, Tensor]:\n",
    "    r'''\n",
    "    在query, key, value上计算点积注意力，若有注意力遮盖则使用，并且应用一个概率为dropout_p的dropout\n",
    "\n",
    "    参数：\n",
    "        - q: shape:`(B, Nt, E)` B代表batch size， Nt是目标语言序列长度，E是嵌入后的特征维度\n",
    "        - key: shape:`(B, Ns, E)` Ns是源语言序列长度\n",
    "        - value: shape:`(B, Ns, E)`与key形状一样\n",
    "        - attn_mask: 要么是3D的tensor，形状为:`(B, Nt, Ns)`或者2D的tensor，形状如:`(Nt, Ns)`\n",
    "\n",
    "        - Output: attention values: shape:`(B, Nt, E)`，与q的形状一致;attention weights: shape:`(B, Nt, Ns)`\n",
    "    \n",
    "    例子：\n",
    "        >>> q = torch.randn((2,3,6))\n",
    "        >>> k = torch.randn((2,4,6))\n",
    "        >>> v = torch.randn((2,4,6))\n",
    "        >>> out = scaled_dot_product_attention(q, k, v)\n",
    "        >>> out[0].shape, out[1].shape\n",
    "        >>> torch.Size([2, 3, 6]) torch.Size([2, 3, 4])\n",
    "    '''\n",
    "    B, Nt, E = q.shape\n",
    "    q = q / math.sqrt(E)\n",
    "# (बी, एनटी, ई) एक्स (बी, ई, एनएस) -> (बी, एनटी, एनएस)\n",
    "    attn = torch.bmm(q, k.transpose(-2,-1))\n",
    "    if attn_mask is not None:\n",
    "        attn += attn_mask \n",
    "# attn का अर्थ है कि लक्ष्य अनुक्रम में प्रत्येक शब्द स्रोत भाषा अनुक्रम पर ध्यान देता है\n",
    "    attn = F.softmax(attn, dim=-1)\n",
    "    if dropout_p:\n",
    "        attn = F.dropout(attn, p=dropout_p)\n",
    "# (बी, एनटी, एनएस) एक्स (बी, एनएस, ई) -> (बी, एनटी, ई)\n",
    "    output = torch.bmm(attn, v)\n",
    "    return output, attn \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### संपूर्ण मल्टी-हेड अटेंशन मैकेनिज्म-मल्टीहेडअटेंशन"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "class MultiheadAttention(nn.Module):\n",
    "    r'''\n",
    "    参数：\n",
    "        embed_dim: 词嵌入的维度\n",
    "        num_heads: 平行头的数量\n",
    "        batch_first: 若`True`，则为(batch, seq, feture)，若为`False`，则为(seq, batch, feature)\n",
    "    \n",
    "    例子：\n",
    "        >>> multihead_attn = MultiheadAttention(embed_dim, num_heads)\n",
    "        >>> attn_output, attn_output_weights = multihead_attn(query, key, value)\n",
    "    '''\n",
    "    def __init__(self, embed_dim, num_heads, dropout=0., bias=True,\n",
    "                 kdim=None, vdim=None, batch_first=False) -> None:\n",
    "# फ़ैक्टरी_क्वार्ग्स = {'डिवाइस': डिवाइस, 'डीटाइप': डीटाइप}\n",
    "        super(MultiheadAttention, self).__init__()\n",
    "        self.embed_dim = embed_dim\n",
    "        self.kdim = kdim if kdim is not None else embed_dim\n",
    "        self.vdim = vdim if vdim is not None else embed_dim\n",
    "        self._qkv_same_embed_dim = self.kdim == embed_dim and self.vdim == embed_dim\n",
    "\n",
    "        self.num_heads = num_heads\n",
    "        self.dropout = dropout\n",
    "        self.batch_first = batch_first\n",
    "        self.head_dim = embed_dim // num_heads\n",
    "        assert self.head_dim * num_heads == self.embed_dim, \"embed_dim must be divisible by num_heads\"\n",
    "\n",
    "        if self._qkv_same_embed_dim is False:\n",
    "            self.q_proj_weight = Parameter(torch.empty((embed_dim, embed_dim)))\n",
    "            self.k_proj_weight = Parameter(torch.empty((embed_dim, self.kdim)))\n",
    "            self.v_proj_weight = Parameter(torch.empty((embed_dim, self.vdim)))\n",
    "            self.register_parameter('in_proj_weight', None)\n",
    "        else:\n",
    "            self.in_proj_weight = Parameter(torch.empty((3 * embed_dim, embed_dim)))\n",
    "            self.register_parameter('q_proj_weight', None)\n",
    "            self.register_parameter('k_proj_weight', None)\n",
    "            self.register_parameter('v_proj_weight', None)\n",
    "\n",
    "        if bias:\n",
    "            self.in_proj_bias = Parameter(torch.empty(3 * embed_dim))\n",
    "        else:\n",
    "            self.register_parameter('in_proj_bias', None)\n",
    "        self.out_proj = nn.Linear(embed_dim, embed_dim, bias=bias)\n",
    "\n",
    "        self._reset_parameters()\n",
    "\n",
    "    def _reset_parameters(self):\n",
    "        if self._qkv_same_embed_dim:\n",
    "            xavier_uniform_(self.in_proj_weight)\n",
    "        else:\n",
    "            xavier_uniform_(self.q_proj_weight)\n",
    "            xavier_uniform_(self.k_proj_weight)\n",
    "            xavier_uniform_(self.v_proj_weight)\n",
    "\n",
    "        if self.in_proj_bias is not None:\n",
    "            constant_(self.in_proj_bias, 0.)\n",
    "            constant_(self.out_proj.bias, 0.)\n",
    "\n",
    "\n",
    "\n",
    "    def forward(self, query: Tensor, key: Tensor, value: Tensor, key_padding_mask: Optional[Tensor] = None,\n",
    "                need_weights: bool = True, attn_mask: Optional[Tensor] = None) -> Tuple[Tensor, Optional[Tensor]]:\n",
    "        if self.batch_first:\n",
    "            query, key, value = [x.transpose(1, 0) for x in (query, key, value)]\n",
    "\n",
    "        if not self._qkv_same_embed_dim:\n",
    "            attn_output, attn_output_weights = multi_head_attention_forward(\n",
    "                query, key, value, self.num_heads,\n",
    "                self.in_proj_weight, self.in_proj_bias,\n",
    "                self.dropout, self.out_proj.weight, self.out_proj.bias,\n",
    "                training=self.training,\n",
    "                key_padding_mask=key_padding_mask, need_weights=need_weights,\n",
    "                attn_mask=attn_mask, use_separate_proj_weight=True,\n",
    "                q_proj_weight=self.q_proj_weight, k_proj_weight=self.k_proj_weight,\n",
    "                v_proj_weight=self.v_proj_weight)\n",
    "        else:\n",
    "            attn_output, attn_output_weights = multi_head_attention_forward(\n",
    "                query, key, value, self.num_heads,\n",
    "                self.in_proj_weight, self.in_proj_bias,\n",
    "                self.dropout, self.out_proj.weight, self.out_proj.bias,\n",
    "                training=self.training,\n",
    "                key_padding_mask=key_padding_mask, need_weights=need_weights,\n",
    "                attn_mask=attn_mask)\n",
    "        if self.batch_first:\n",
    "            return attn_output.transpose(1, 0), attn_output_weights\n",
    "        else:\n",
    "            return attn_output, attn_output_weights"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "इसके बाद, आप इसका अभ्यास कर सकते हैं और स्थिति एन्कोडिंग जोड़ सकते हैं। आप पा सकते हैं कि स्थिति एन्कोडिंग और मल्टी-हेड ध्यान जोड़ने से पहले और बाद का आकार नहीं बदलेगा।"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2, 4, 100])\n",
      "torch.Size([2, 4, 100]) torch.Size([4, 2, 2])\n"
     ]
    }
   ],
   "source": [
    "# क्योंकि बैच_फर्स्ट गलत है, src का आकार है: `(seq, बैच, एम्बेड_डिम)`\n",
    "src = torch.randn((2,4,100))\n",
    "src = positional_encoding(src,100,0.1)\n",
    "print(src.shape)\n",
    "multihead_attn = MultiheadAttention(100, 4, 0.1)\n",
    "attn_output, attn_output_weights = multihead_attn(src,src,src)\n",
    "print(attn_output.shape, attn_output_weights.shape)\n",
    "\n",
    "#मशाल.आकार([2,4,100])\n",
    "# टॉर्च.आकार([2,4,100]) टॉर्च.आकार([4,2,2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "## **<div id='build'>बिल्ड ट्रांसफार्मर</div>**\n",
    "-एनकोडर परत\n",
    "\n",
    "![](./pictures/2-2-1-encoder.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "class TransformerEncoderLayer(nn.Module):\n",
    "    r'''\n",
    "    参数：\n",
    "        d_model: 词嵌入的维度（必备）\n",
    "        nhead: 多头注意力中平行头的数目（必备）\n",
    "        dim_feedforward: 全连接层的神经元的数目，又称经过此层输入的维度（Default = 2048）\n",
    "        dropout: dropout的概率（Default = 0.1）\n",
    "        activation: 两个线性层中间的激活函数，默认relu或gelu\n",
    "        lay_norm_eps: layer normalization中的微小量，防止分母为0（Default = 1e-5）\n",
    "        batch_first: 若`True`，则为(batch, seq, feture)，若为`False`，则为(seq, batch, feature)（Default：False）\n",
    "\n",
    "    例子：\n",
    "        >>> encoder_layer = TransformerEncoderLayer(d_model=512, nhead=8)\n",
    "        >>> src = torch.randn((32, 10, 512))\n",
    "        >>> out = encoder_layer(src)\n",
    "    '''\n",
    "\n",
    "    def __init__(self, d_model, nhead, dim_feedforward=2048, dropout=0.1, activation=F.relu,\n",
    "                 layer_norm_eps=1e-5, batch_first=False) -> None:\n",
    "        super(TransformerEncoderLayer, self).__init__()\n",
    "        self.self_attn = MultiheadAttention(d_model, nhead, dropout=dropout, batch_first=batch_first)\n",
    "        self.linear1 = nn.Linear(d_model, dim_feedforward)\n",
    "        self.dropout = nn.Dropout(dropout)\n",
    "        self.linear2 = nn.Linear(dim_feedforward, d_model)\n",
    "\n",
    "        self.norm1 = nn.LayerNorm(d_model, eps=layer_norm_eps)\n",
    "        self.norm2 = nn.LayerNorm(d_model, eps=layer_norm_eps)\n",
    "        self.dropout1 = nn.Dropout(dropout)\n",
    "        self.dropout2 = nn.Dropout(dropout)\n",
    "        self.activation = activation        \n",
    "\n",
    "\n",
    "    def forward(self, src: Tensor, src_mask: Optional[Tensor] = None, src_key_padding_mask: Optional[Tensor] = None) -> Tensor:\n",
    "        src = positional_encoding(src, src.shape[-1])\n",
    "        src2 = self.self_attn(src, src, src, attn_mask=src_mask, \n",
    "        key_padding_mask=src_key_padding_mask)[0]\n",
    "        src = src + self.dropout1(src2)\n",
    "        src = self.norm1(src)\n",
    "        src2 = self.linear2(self.dropout(self.activation(self.linear1(src))))\n",
    "        src = src + self.dropout(src2)\n",
    "        src = self.norm2(src)\n",
    "        return src\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([32, 10, 512])\n"
     ]
    }
   ],
   "source": [
    "# आइए एक छोटा सा उदाहरण देखें\n",
    "encoder_layer = TransformerEncoderLayer(d_model=512, nhead=8)\n",
    "src = torch.randn((32, 10, 512))\n",
    "out = encoder_layer(src)\n",
    "print(out.shape)\n",
    "#मशाल.आकार([32,10,512])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ट्रांसफार्मर परत एनकोडर बनाती है"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "class TransformerEncoder(nn.Module):\n",
    "    r'''\n",
    "    参数：\n",
    "        encoder_layer（必备）\n",
    "        num_layers： encoder_layer的层数（必备）\n",
    "        norm: 归一化的选择（可选）\n",
    "    \n",
    "    例子：\n",
    "        >>> encoder_layer = TransformerEncoderLayer(d_model=512, nhead=8)\n",
    "        >>> transformer_encoder = TransformerEncoder(encoder_layer, num_layers=6)\n",
    "        >>> src = torch.randn((10, 32, 512))\n",
    "        >>> out = transformer_encoder(src)\n",
    "    '''\n",
    "\n",
    "    def __init__(self, encoder_layer, num_layers, norm=None):\n",
    "        super(TransformerEncoder, self).__init__()\n",
    "        self.layer = encoder_layer\n",
    "        self.num_layers = num_layers\n",
    "        self.norm = norm\n",
    "    \n",
    "    def forward(self, src: Tensor, mask: Optional[Tensor] = None, src_key_padding_mask: Optional[Tensor] = None) -> Tensor:\n",
    "        output = positional_encoding(src, src.shape[-1])\n",
    "        for _ in range(self.num_layers):\n",
    "            output = self.layer(output, src_mask=mask, src_key_padding_mask=src_key_padding_mask)\n",
    "        \n",
    "        if self.norm is not None:\n",
    "            output = self.norm(output)\n",
    "        \n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([10, 32, 512])\n"
     ]
    }
   ],
   "source": [
    "#उदाहरण\n",
    "encoder_layer = TransformerEncoderLayer(d_model=512, nhead=8)\n",
    "transformer_encoder = TransformerEncoder(encoder_layer, num_layers=6)\n",
    "src = torch.randn((10, 32, 512))\n",
    "out = transformer_encoder(src)\n",
    "print(out.shape)\n",
    "#मशाल.आकार([10,32,512])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "## डिकोडर परत:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "class TransformerDecoderLayer(nn.Module):\n",
    "    r'''\n",
    "    参数：\n",
    "        d_model: 词嵌入的维度（必备）\n",
    "        nhead: 多头注意力中平行头的数目（必备）\n",
    "        dim_feedforward: 全连接层的神经元的数目，又称经过此层输入的维度（Default = 2048）\n",
    "        dropout: dropout的概率（Default = 0.1）\n",
    "        activation: 两个线性层中间的激活函数，默认relu或gelu\n",
    "        lay_norm_eps: layer normalization中的微小量，防止分母为0（Default = 1e-5）\n",
    "        batch_first: 若`True`，则为(batch, seq, feture)，若为`False`，则为(seq, batch, feature)（Default：False）\n",
    "    \n",
    "    例子：\n",
    "        >>> decoder_layer = TransformerDecoderLayer(d_model=512, nhead=8)\n",
    "        >>> memory = torch.randn((10, 32, 512))\n",
    "        >>> tgt = torch.randn((20, 32, 512))\n",
    "        >>> out = decoder_layer(tgt, memory)\n",
    "    '''\n",
    "    def __init__(self, d_model, nhead, dim_feedforward=2048, dropout=0.1, activation=F.relu,\n",
    "                 layer_norm_eps=1e-5, batch_first=False) -> None:\n",
    "        super(TransformerDecoderLayer, self).__init__()\n",
    "        self.self_attn = MultiheadAttention(d_model, nhead, dropout=dropout, batch_first=batch_first)\n",
    "        self.multihead_attn = MultiheadAttention(d_model, nhead, dropout=dropout, batch_first=batch_first)\n",
    "\n",
    "        self.linear1 = nn.Linear(d_model, dim_feedforward)\n",
    "        self.dropout = nn.Dropout(dropout)\n",
    "        self.linear2 = nn.Linear(dim_feedforward, d_model)\n",
    "\n",
    "        self.norm1 = nn.LayerNorm(d_model, eps=layer_norm_eps)\n",
    "        self.norm2 = nn.LayerNorm(d_model, eps=layer_norm_eps)\n",
    "        self.norm3 = nn.LayerNorm(d_model, eps=layer_norm_eps)\n",
    "        self.dropout1 = nn.Dropout(dropout)\n",
    "        self.dropout2 = nn.Dropout(dropout)\n",
    "        self.dropout3 = nn.Dropout(dropout)\n",
    "\n",
    "        self.activation = activation\n",
    "\n",
    "    def forward(self, tgt: Tensor, memory: Tensor, tgt_mask: Optional[Tensor] = None, \n",
    "                memory_mask: Optional[Tensor] = None,tgt_key_padding_mask: Optional[Tensor] = None, memory_key_padding_mask: Optional[Tensor] = None) -> Tensor:\n",
    "        r'''\n",
    "        参数：\n",
    "            tgt: 目标语言序列（必备）\n",
    "            memory: 从最后一个encoder_layer跑出的句子（必备）\n",
    "            tgt_mask: 目标语言序列的mask（可选）\n",
    "            memory_mask（可选）\n",
    "            tgt_key_padding_mask（可选）\n",
    "            memory_key_padding_mask（可选）\n",
    "        '''\n",
    "        tgt2 = self.self_attn(tgt, tgt, tgt, attn_mask=tgt_mask,\n",
    "                              key_padding_mask=tgt_key_padding_mask)[0]\n",
    "        tgt = tgt + self.dropout1(tgt2)\n",
    "        tgt = self.norm1(tgt)\n",
    "        tgt2 = self.multihead_attn(tgt, memory, memory, attn_mask=memory_mask,\n",
    "                                   key_padding_mask=memory_key_padding_mask)[0]\n",
    "        tgt = tgt + self.dropout2(tgt2)\n",
    "        tgt = self.norm2(tgt)\n",
    "        tgt2 = self.linear2(self.dropout(self.activation(self.linear1(tgt))))\n",
    "        tgt = tgt + self.dropout3(tgt2)\n",
    "        tgt = self.norm3(tgt)\n",
    "        return tgt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([20, 32, 512])\n"
     ]
    }
   ],
   "source": [
    "# प्यारा सा उदाहरण\n",
    "decoder_layer = nn.TransformerDecoderLayer(d_model=512, nhead=8)\n",
    "memory = torch.randn((10, 32, 512))\n",
    "tgt = torch.randn((20, 32, 512))\n",
    "out = decoder_layer(tgt, memory)\n",
    "print(out.shape)\n",
    "#मशाल.आकार([20,32,512])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "Decoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "class TransformerDecoder(nn.Module):\n",
    "    r'''\n",
    "    参数：\n",
    "        decoder_layer（必备）\n",
    "        num_layers: decoder_layer的层数（必备）\n",
    "        norm: 归一化选择\n",
    "    \n",
    "    例子：\n",
    "        >>> decoder_layer =TransformerDecoderLayer(d_model=512, nhead=8)\n",
    "        >>> transformer_decoder = TransformerDecoder(decoder_layer, num_layers=6)\n",
    "        >>> memory = torch.rand(10, 32, 512)\n",
    "        >>> tgt = torch.rand(20, 32, 512)\n",
    "        >>> out = transformer_decoder(tgt, memory)\n",
    "    '''\n",
    "    def __init__(self, decoder_layer, num_layers, norm=None):\n",
    "        super(TransformerDecoder, self).__init__()\n",
    "        self.layer = decoder_layer\n",
    "        self.num_layers = num_layers\n",
    "        self.norm = norm\n",
    "    \n",
    "    def forward(self, tgt: Tensor, memory: Tensor, tgt_mask: Optional[Tensor] = None,\n",
    "                memory_mask: Optional[Tensor] = None, tgt_key_padding_mask: Optional[Tensor] = None,\n",
    "                memory_key_padding_mask: Optional[Tensor] = None) -> Tensor:\n",
    "        output = tgt\n",
    "        for _ in range(self.num_layers):\n",
    "            output = self.layer(output, memory, tgt_mask=tgt_mask,\n",
    "                         memory_mask=memory_mask,\n",
    "                         tgt_key_padding_mask=tgt_key_padding_mask,\n",
    "                         memory_key_padding_mask=memory_key_padding_mask)\n",
    "        if self.norm is not None:\n",
    "            output = self.norm(output)\n",
    "\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([20, 32, 512])\n"
     ]
    }
   ],
   "source": [
    "# प्यारा सा उदाहरण\n",
    "decoder_layer =TransformerDecoderLayer(d_model=512, nhead=8)\n",
    "transformer_decoder = TransformerDecoder(decoder_layer, num_layers=6)\n",
    "memory = torch.rand(10, 32, 512)\n",
    "tgt = torch.rand(20, 32, 512)\n",
    "out = transformer_decoder(tgt, memory)\n",
    "print(out.shape)\n",
    "#मशाल.आकार([20,32,512])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "संक्षेप में, स्थिति एन्कोडिंग और मल्टी-हेड ध्यान के बाद, एनकोडर लेयर और डिकोडर लेयर के आकार नहीं बदलेंगे, जबकि एनकोडर और डिकोडर क्रमशः src और tgt के आकार के अनुरूप हैं।"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ट्रांसफार्मर"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Transformer(nn.Module):\n",
    "    r'''\n",
    "    参数：\n",
    "        d_model: 词嵌入的维度（必备）（Default=512）\n",
    "        nhead: 多头注意力中平行头的数目（必备）（Default=8）\n",
    "        num_encoder_layers:编码层层数（Default=8）\n",
    "        num_decoder_layers:解码层层数（Default=8）\n",
    "        dim_feedforward: 全连接层的神经元的数目，又称经过此层输入的维度（Default = 2048）\n",
    "        dropout: dropout的概率（Default = 0.1）\n",
    "        activation: 两个线性层中间的激活函数，默认relu或gelu\n",
    "        custom_encoder: 自定义encoder（Default=None）\n",
    "        custom_decoder: 自定义decoder（Default=None）\n",
    "        lay_norm_eps: layer normalization中的微小量，防止分母为0（Default = 1e-5）\n",
    "        batch_first: 若`True`，则为(batch, seq, feture)，若为`False`，则为(seq, batch, feature)（Default：False）\n",
    "    \n",
    "    例子：\n",
    "        >>> transformer_model = Transformer(nhead=16, num_encoder_layers=12)\n",
    "        >>> src = torch.rand((10, 32, 512))\n",
    "        >>> tgt = torch.rand((20, 32, 512))\n",
    "        >>> out = transformer_model(src, tgt)\n",
    "    '''\n",
    "    def __init__(self, d_model: int = 512, nhead: int = 8, num_encoder_layers: int = 6,\n",
    "                 num_decoder_layers: int = 6, dim_feedforward: int = 2048, dropout: float = 0.1,\n",
    "                 activation = F.relu, custom_encoder: Optional[Any] = None, custom_decoder: Optional[Any] = None,\n",
    "                 layer_norm_eps: float = 1e-5, batch_first: bool = False) -> None:\n",
    "        super(Transformer, self).__init__()\n",
    "        if custom_encoder is not None:\n",
    "            self.encoder = custom_encoder\n",
    "        else:\n",
    "            encoder_layer = TransformerEncoderLayer(d_model, nhead, dim_feedforward, dropout,\n",
    "                                                    activation, layer_norm_eps, batch_first)\n",
    "            encoder_norm = nn.LayerNorm(d_model, eps=layer_norm_eps)\n",
    "            self.encoder = TransformerEncoder(encoder_layer, num_encoder_layers)\n",
    "\n",
    "        if custom_decoder is not None:\n",
    "            self.decoder = custom_decoder\n",
    "        else:\n",
    "            decoder_layer = TransformerDecoderLayer(d_model, nhead, dim_feedforward, dropout,\n",
    "                                                    activation, layer_norm_eps, batch_first)\n",
    "            decoder_norm = nn.LayerNorm(d_model, eps=layer_norm_eps)\n",
    "            self.decoder = TransformerDecoder(decoder_layer, num_decoder_layers, decoder_norm)\n",
    "\n",
    "        self._reset_parameters()\n",
    "\n",
    "        self.d_model = d_model\n",
    "        self.nhead = nhead\n",
    "\n",
    "        self.batch_first = batch_first\n",
    "\n",
    "    def forward(self, src: Tensor, tgt: Tensor, src_mask: Optional[Tensor] = None, tgt_mask: Optional[Tensor] = None,\n",
    "                memory_mask: Optional[Tensor] = None, src_key_padding_mask: Optional[Tensor] = None,\n",
    "                tgt_key_padding_mask: Optional[Tensor] = None, memory_key_padding_mask: Optional[Tensor] = None) -> Tensor:\n",
    "        r'''\n",
    "        参数：\n",
    "            src: 源语言序列（送入Encoder）（必备）\n",
    "            tgt: 目标语言序列（送入Decoder）（必备）\n",
    "            src_mask: （可选)\n",
    "            tgt_mask: （可选）\n",
    "            memory_mask: （可选）\n",
    "            src_key_padding_mask: （可选）\n",
    "            tgt_key_padding_mask: （可选）\n",
    "            memory_key_padding_mask: （可选）\n",
    "        \n",
    "        形状：\n",
    "            - src: shape:`(S, N, E)`, `(N, S, E)` if batch_first.\n",
    "            - tgt: shape:`(T, N, E)`, `(N, T, E)` if batch_first.\n",
    "            - src_mask: shape:`(S, S)`.\n",
    "            - tgt_mask: shape:`(T, T)`.\n",
    "            - memory_mask: shape:`(T, S)`.\n",
    "            - src_key_padding_mask: shape:`(N, S)`.\n",
    "            - tgt_key_padding_mask: shape:`(N, T)`.\n",
    "            - memory_key_padding_mask: shape:`(N, S)`.\n",
    "\n",
    "            [src/tgt/memory]_mask确保有些位置不被看到，如做decode的时候，只能看该位置及其以前的，而不能看后面的。\n",
    "            若为ByteTensor，非0的位置会被忽略不做注意力；若为BoolTensor，True对应的位置会被忽略；\n",
    "            若为数值，则会直接加到attn_weights\n",
    "\n",
    "            [src/tgt/memory]_key_padding_mask 使得key里面的某些元素不参与attention计算，三种情况同上\n",
    "\n",
    "            - output: shape:`(T, N, E)`, `(N, T, E)` if batch_first.\n",
    "\n",
    "        注意：\n",
    "            src和tgt的最后一维需要等于d_model，batch的那一维需要相等\n",
    "            \n",
    "        例子:\n",
    "            >>> output = transformer_model(src, tgt, src_mask=src_mask, tgt_mask=tgt_mask)\n",
    "        '''\n",
    "        memory = self.encoder(src, mask=src_mask, src_key_padding_mask=src_key_padding_mask)\n",
    "        output = self.decoder(tgt, memory, tgt_mask=tgt_mask, memory_mask=memory_mask,\n",
    "                              tgt_key_padding_mask=tgt_key_padding_mask,\n",
    "                              memory_key_padding_mask=memory_key_padding_mask)\n",
    "        return output\n",
    "        \n",
    "    def generate_square_subsequent_mask(self, sz: int) -> Tensor:\n",
    "        r'''产生关于序列的mask，被遮住的区域赋值`-inf`，未被遮住的区域赋值为`0`'''\n",
    "        mask = (torch.triu(torch.ones(sz, sz)) == 1).transpose(0, 1)\n",
    "        mask = mask.float().masked_fill(mask == 0, float('-inf')).masked_fill(mask == 1, float(0.0))\n",
    "        return mask\n",
    "\n",
    "    def _reset_parameters(self):\n",
    "        r'''用正态分布初始化参数'''\n",
    "        for p in self.parameters():\n",
    "            if p.dim() > 1:\n",
    "                xavier_uniform_(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([20, 32, 512])\n"
     ]
    }
   ],
   "source": [
    "# छोटा सा उदाहरण\n",
    "transformer_model = Transformer(nhead=16, num_encoder_layers=12)\n",
    "src = torch.rand((10, 32, 512))\n",
    "tgt = torch.rand((20, 32, 512))\n",
    "out = transformer_model(src, tgt)\n",
    "print(out.shape)\n",
    "#मशाल.आकार([20,32,512])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "अब तक, हमने आधिकारिक संस्करण की तुलना में PyTorch की ट्रांसफॉर्मर लाइब्रेरी को पूरी तरह से कार्यान्वित किया है, इस हस्तलिखित संस्करण में कम निर्णय कथन हैं।\n",
    "## आभार\n",
    "यह लेख ताई यूनपेंग द्वारा लिखा गया था और परियोजना के सदस्यों द्वारा पुनर्गठित और क्रमबद्ध किया गया था, अंत में, मैं आपकी पढ़ने की प्रतिक्रिया और स्टार की प्रतीक्षा कर रहा हूं, धन्यवाद।"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "3bfce0b4c492a35815b5705a19fe374a7eea0baaa08b34d90450caf1fe9ce20b"
  },
  "kernelspec": {
   "display_name": "Python 3.8.10 64-bit ('venv': virtualenv)",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": ""
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
