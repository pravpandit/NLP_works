{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "46f5f5b2-f7f9-415f-8049-3e2f66d38195",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Chapter 4 Calling OpenAI Function Calling in LangChain\n",
    "\n",
    "- [1. Set OpenAI API Key](#1. Set OpenAI-API-Key)\n",
    "- [2. Pydantic syntax](#2. Pydantic syntax)\n",
    "- [2.1 Simple creation of Python class](#2.1-Simple creation of Python class)\n",
    "- [2.2 Use Pydantic to create class](#2.2-Use Pydantic to create class)\n",
    "- [3. OpenAI function definition based on Pydantic](#3. OpenAI function definition based on Pydantic)\n",
    "- [3.1 Construct OpenAI function](#3.1-Construct OpenAI function)\n",
    "- [3.2 Use function through langchain](#3.2-Use function through langchain)\n",
    "- [3.3 Forced use of function](#3.3-Forced use of function)\n",
    "- [4. Use function](#4. Use function)\n",
    "- [4.1 Chain use](#3.1-Chain use)- [4.2 Using multiple functions](#4.2-Using multiple functions)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1eb87015",
   "metadata": {},
   "source": [
    "# 1. Set OpenAI-API-Key\n",
    "\n",
    "For details, see `Set OpenAI_API_KEY.ipynb` file"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ea4686a",
   "metadata": {},
   "source": [
    "# 2. Pydantic syntax"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46645a3f",
   "metadata": {},
   "source": [
    "Pydantic is a \"data validation library\" for python.\n",
    "- Works with python type annotations. However, unlike static type checking, they are actively used for data validation and conversion at runtime.\n",
    "- Provides built-in methods to serialize/deserialize models to JSON, dictionaries, etc.\n",
    "- LangChain leverages Pydantic to create JsONScheme description functions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56cbff25",
   "metadata": {},
   "source": [
    "## 2.1 Simple creation of Python class"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "188a17b3",
   "metadata": {},
   "source": [
    "In standard Python, you can create a User class with three attribute values: name, age, and email. If you create it directly, you cannot constrain the field type, which means that an incompatible string type may be passed in for age."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3ae8e977",
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import List\n",
    "from pydantic import BaseModel, Field"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d9447a47",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create User class\n",
    "class User:\n",
    "    def __init__(self, name: str, age: int, email: str):\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "        self.email = email"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e765e2b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Joe\n"
     ]
    }
   ],
   "source": [
    "# Generate user object\n",
    "foo = User(name=\"Joe\",age=32, email=\"joe@gmail.com\")\n",
    "\n",
    "# Output the name field in foo\n",
    "print(foo.name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa33be60",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bar\n"
     ]
    }
   ],
   "source": [
    "# Generate user object\n",
    "foo = User(name=\"Joe\",age=\"bar\", email=\"joe@gmail.com\")\n",
    "\n",
    "# Output the name field in foo\n",
    "# The name field is filled with a string type, but it can be created successfully and output\n",
    "print(foo.age)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccbfc8d5",
   "metadata": {},
   "source": [
    "## 2.2 Creating classes with Pydantic"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80a59b93",
   "metadata": {},
   "source": [
    "When creating a class with Pydantic, you can set format constraints on the attribute values ​​of the class. When creating a class, the format will be verified and an error will be reported if the format does not meet the requirements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "49675d39",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use Pydantic to create the pUser class, indicating that age uses the int type\n",
    "class pUser(BaseModel):\n",
    "    name: str\n",
    "    age: int\n",
    "    email: str"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "825b261e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Jane\n"
     ]
    }
   ],
   "source": [
    "# Generate user object\n",
    "foo_p = pUser(name=\"Jane\", age=32, email=\"jane@gmail.com\")\n",
    "\n",
    "# Output the name field in foo\n",
    "print(foo_p.name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41a635f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 validation error for pUser\n",
      "age\n",
      "  value is not a valid integer (type=type_error.integer)\n"
     ]
    }
   ],
   "source": [
    "# Using pydantic, since age is not an int, an error will be reported. Output the error content\n",
    "try:\n",
    "    foo_p = pUser(name=\"Jane\", age=\"bar\", email=\"jane@gmail.com\")\n",
    "except Exception as e:\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e7ec9aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Class(BaseModel):\n",
    "    students: List[pUser]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3206e1fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Class(students=[pUser(name='Jane', age=32, email='jane@gmail.com')])"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "obj = Class(\n",
    "    students=[pUser(name=\"Jane\", age=32, email=\"jane@gmail.com\")]\n",
    ")\n",
    "obj"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f956e561",
   "metadata": {},
   "source": [
    "# 3. OpenAI function definition based on Pydantic"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06f67f9a",
   "metadata": {},
   "source": [
    "## 3.1 Constructing OpenAI's function"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8765afc9",
   "metadata": {},
   "source": [
    "We created a class `WeatherSearch`, which inherits from the BaseModel subclass of Pydantic. Therefore, all members of the `WeatherSearch` class are equipped with data type verification mechanisms. The class has a member `airport_code` of type str to represent the airport code, and a description information description to explain the role of airport_code. There is also a text description information above airport_code: Enter the airport code to get the weather information of the airport. This text information is a description of the class `WeatherSearch`, which means that the weather conditions can be queried through the airport code.\n",
    "\n",
    "At the same time, we use langchain to convert this `WeatherSearch` class into an openai function description object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8886dc0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define WeatherSearch\n",
    "# WeatherSearch function needs to be commented to complete the function description\n",
    "class WeatherSearch(BaseModel):\n",
    "\"\"\"Enter the airport code to get the weather information for that airport\"\"\"\n",
    "    airport_code: str = Field(description=\"输入机场代码查询天气\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26e7e42f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import langchain\n",
    "from langchain.utils.openai_functions import convert_pydantic_to_openai_function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "104b30c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'name': 'WeatherSearch',\n",
       " 'description': '输入机场代码，获取该机场的天气信息',\n",
       " 'parameters': {'title': 'WeatherSearch',\n",
       "  'description': '输入机场代码，获取该机场的天气信息',\n",
       "  'type': 'object',\n",
       "  'properties': {'airport_code': {'title': 'Airport Code',\n",
       "    'description': '输入机场代码查询天气',\n",
       "    'type': 'string'}},\n",
       "  'required': ['airport_code']}}"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Convert to openai function calling mode\n",
    "weather_function = convert_pydantic_to_openai_function(WeatherSearch)\n",
    "weather_function"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbd9fa5c",
   "metadata": {},
   "source": [
    "Next, use the `convert_pydantic_to_openai_function` method of langchain to convert the Pydantic class into an OpenAI function description object. It should be noted that the text description information is indispensable when defining the Pydantic class. If the text description information is missing, an error will occur during the conversion.\n",
    "\n",
    "- `WeatherSearch1`, because we did not add the description information of itself to `WeatherSearch1`, an error will be reported during the conversion.\n",
    "- `WeatherSearch2` adds the description information of itself, so no error will be reported."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa2584c8",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'description'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)\n",
      "Cell \u001b[0;32mIn[15], line 5\u001b[0m\n",
      "\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mclass\u001b[39;00m \u001b[38;5;21;01mWeatherSearch1\u001b[39;00m(BaseModel):\n",
      "\u001b[1;32m      3\u001b[0m     airport_code: \u001b[38;5;28mstr\u001b[39m \u001b[38;5;241m=\u001b[39m Field(description\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m输入机场代码查询天气\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[0;32m----> 5\u001b[0m convert_pydantic_to_openai_function(WeatherSearch1)\n",
      "\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/langchain/utils/openai_functions.py:28\u001b[0m, in \u001b[0;36mconvert_pydantic_to_openai_function\u001b[0;34m(model, name, description)\u001b[0m\n",
      "\u001b[1;32m     24\u001b[0m schema \u001b[38;5;241m=\u001b[39m dereference_refs(model\u001b[38;5;241m.\u001b[39mschema())\n",
      "\u001b[1;32m     25\u001b[0m schema\u001b[38;5;241m.\u001b[39mpop(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdefinitions\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m)\n",
      "\u001b[1;32m     26\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m {\n",
      "\u001b[1;32m     27\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m\"\u001b[39m: name \u001b[38;5;129;01mor\u001b[39;00m schema[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtitle\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n",
      "\u001b[0;32m---> 28\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdescription\u001b[39m\u001b[38;5;124m\"\u001b[39m: description \u001b[38;5;129;01mor\u001b[39;00m schema[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdescription\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n",
      "\u001b[1;32m     29\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mparameters\u001b[39m\u001b[38;5;124m\"\u001b[39m: schema,\n",
      "\u001b[1;32m     30\u001b[0m }\n",
      "\n",
      "\u001b[0;31mKeyError\u001b[0m: 'description'"
     ]
    }
   ],
   "source": [
    "# WeatherSearch1 has no comments, an error will be reported\n",
    "class WeatherSearch1(BaseModel):\n",
    "    airport_code: str = Field(description=\"输入机场代码查询天气\")\n",
    "\n",
    "convert_pydantic_to_openai_function(WeatherSearch1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92e371eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Construct WeatherSearch2 without commenting on parameters\n",
    "class WeatherSearch2(BaseModel):\n",
    "\"\"\"Enter the airport code to get the weather information for that airport\"\"\"\n",
    "    airport_code: str"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b710902b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'name': 'WeatherSearch2',\n",
       " 'description': '输入机场代码，获取该机场的天气信息',\n",
       " 'parameters': {'title': 'WeatherSearch2',\n",
       "  'description': '输入机场代码，获取该机场的天气信息',\n",
       "  'type': 'object',\n",
       "  'properties': {'airport_code': {'title': 'Airport Code', 'type': 'string'}},\n",
       "  'required': ['airport_code']}}"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "convert_pydantic_to_openai_function(WeatherSearch2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35ff3121",
   "metadata": {},
   "source": [
    "## 3.2 Using function with langchain"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0792e86e",
   "metadata": {},
   "source": [
    "There are two ways to implement LLM calling functions\n",
    "\n",
    "- Specify functions in `invoke`\n",
    "- Use the `bind` method to bind the function description object before executing `invoke`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cea24c65",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import ChatOpenAI\n",
    "from langchain.chat_models import ChatOpenAI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f8ed0850",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = ChatOpenAI()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "550029a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AIMessage(content='', additional_kwargs={'function_call': {'name': 'WeatherSearch', 'arguments': '{\\n  \"airport_code\": \"SFO\"\\n}'}}, example=False)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use openai function in invoke\n",
    "model.invoke(\"今天旧金山的天气怎么样？\", functions=[weather_function])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "458e21ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AIMessage(content='', additional_kwargs={'function_call': {'name': 'WeatherSearch', 'arguments': '{\\n  \"airport_code\": \"SFO\"\\n}'}}, example=False)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Declare functions directly in the model construction. No need to declare them during the conversation.\n",
    "model_with_function = model.bind(functions=[weather_function])\n",
    "model_with_function.invoke(\"今天旧金山的天气怎么样？\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c6f6aed",
   "metadata": {},
   "source": [
    "## 3.3 Mandatory use of function"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9dfdcad6",
   "metadata": {},
   "source": [
    "If you want to force the use of function, you need to add the `function_call` parameter in `bind`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ddc08c4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Force the use of function and declare function_call when building the model\n",
    "model_with_forced_function = model.bind(functions=[weather_function], function_call={\"name\":\"WeatherSearch\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "11bb59da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AIMessage(content='', additional_kwargs={'function_call': {'name': 'WeatherSearch', 'arguments': '{\\n  \"airport_code\": \"SFO\"\\n}'}}, example=False)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Based on the declared function dialogue, the function can be called\n",
    "model_with_forced_function.invoke(\"旧金山的天气怎么样？\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fcce9a68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AIMessage(content='', additional_kwargs={'function_call': {'name': 'WeatherSearch', 'arguments': '{\\n  \"airport_code\": \"LAX\"\\n}'}}, example=False)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Type hi to force the use of the function model. This will hit the prompt even if it has nothing to do with the function description.\n",
    "model_with_forced_function.invoke(\"你好!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f805a67",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AIMessage(content='Hello! How can I assist you today?', additional_kwargs={}, example=False)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Input hi, the model is not forced to use function, the prompt has nothing to do with the function description and will not be hit\n",
    "model_with_function.invoke(\"你好!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8c131cf",
   "metadata": {},
   "source": [
    "# 4. Use function"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6002ec0d",
   "metadata": {},
   "source": [
    "In general, we will use chain to implement the entire question-and-answer process. Next, we will create a chain to implement the function call function."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43f0e6d4",
   "metadata": {},
   "source": [
    "## 4.1 Chain Usage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d7d7b66",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Introduce the required environment\n",
    "from langchain.prompts import ChatPromptTemplate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17df129f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create chat code using predefined templates\n",
    "prompt = ChatPromptTemplate.from_messages([\n",
    "    (\"system\", \"你是一个乐于助人的助手\"),\n",
    "    (\"user\", \"{input}\")\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c70e2192",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Using prompt + model_with_function combination\n",
    "chain = prompt | model_with_function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d5c71f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AIMessage(content='', additional_kwargs={'function_call': {'name': 'WeatherSearch', 'arguments': '{\\n  \"airport_code\": \"SFO\"\\n}'}}, example=False)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a question and answer that hits the function\n",
    "chain.invoke({\"input\": \"今天旧金山的天气怎么样？\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a98e8dbd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AIMessage(content='Hello! How can I assist you today?', additional_kwargs={}, example=False)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a question and answer for the missing function\n",
    "chain.invoke({\"input\": \"你好!\"})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19d7433a",
   "metadata": {},
   "source": [
    "## 4.2 Using multiple functions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1884ed9",
   "metadata": {},
   "source": [
    "We can pass an array of functions and let LLM decide which one to use based on the problem context."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1cc30d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create ArtistSearch function\n",
    "class ArtistSearch(BaseModel):\n",
    "\"\"\"Call this command to get the song titles of a specific artist\"\"\"\n",
    "    artist_name: str = Field(description=\"要查的艺术家的名字\")\n",
    "    n: int = Field(description=\"number of results\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be15a438",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assemble WeatherSearch and ArtistSearch functions\n",
    "functions = [\n",
    "    convert_pydantic_to_openai_function(WeatherSearch),\n",
    "    convert_pydantic_to_openai_function(ArtistSearch),\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "747e93e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Put two functions into the model\n",
    "model_with_functions = model.bind(functions=functions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "276e8a25",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AIMessage(content='', additional_kwargs={'function_call': {'name': 'WeatherSearch', 'arguments': '{\\n  \"airport_code\": \"SFO\"\\n}'}}, example=False)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Hit WeatherSearch function\n",
    "model_with_functions.invoke(\"旧金山的天气怎么样？\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb1dcd0b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AIMessage(content='', additional_kwargs={'function_call': {'name': 'ArtistSearch', 'arguments': '{\\n  \"artist_name\": \"taylor swift\",\\n  \"n\": 3\\n}'}}, example=False)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Hit ArtistSearch function\n",
    "model_with_functions.invoke(\"找到泰勒·斯威夫特的三首歌？\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "06f9e5d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AIMessage(content='Hello! How can I assist you today?', additional_kwargs={}, example=False)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Hits and misses\n",
    "model_with_functions.invoke(\"你好!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fbd5418",
   "metadata": {},
   "source": [
    "# 5. English version tips"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4acb9138",
   "metadata": {},
   "source": [
    "**3.1 Constructing OpenAI’s function**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2af21fad",
   "metadata": {},
   "outputs": [],
   "source": [
    "class WeatherSearch(BaseModel):\n",
    "\"\"\"Call this with an airport code to get the weather at that airport\"\"\"\n",
    "    airport_code: str = Field(description=\"airport code to get weather for\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75c13c9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "class WeatherSearch1(BaseModel):\n",
    "    airport_code: str = Field(description=\"airport code to get weather for\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd9a8ed3",
   "metadata": {},
   "outputs": [],
   "source": [
    "class WeatherSearch2(BaseModel):\n",
    "\"\"\"Call this with an airport code to get the weather at that airport\"\"\"\n",
    "    airport_code: str"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f54d4bd2",
   "metadata": {},
   "source": [
    "**4.1 Chaining**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c2b91dd9",
   "metadata": {},
   "outputs": [],
   "source": [
    "prompt = ChatPromptTemplate.from_messages([\n",
    "    (\"system\", \"You are a helpful assistant\"),\n",
    "    (\"user\", \"{input}\")\n",
    "])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "259599c1",
   "metadata": {},
   "source": [
    "**4.2 Using multiple functions**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cfe327f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "class ArtistSearch(BaseModel):\n",
    "\"\"\"Call this to get the names of songs by a particular artist\"\"\"\n",
    "    artist_name: str = Field(description=\"name of artist to look up\")\n",
    "    n: int = Field(description=\"number of results\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
